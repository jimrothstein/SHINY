# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
# Create ASTDT and ASTDTF
# No imputation for partial date
res1 =derive_vars_dt(
mhdt,
new_vars_prefix = "AST",
dtc = MHSTDTC,
highest_imputation="n",   # default
flag_imputation="auto"   # default, "date", "none"
)
res2 =derive_vars_dt(
mhdt,
new_vars_prefix = "AST",
dtc = MHSTDTC,
highest_imputation="M"
)
#if (interactive()) {                   #
# table example
shinyApp(
h3("Working with derive_advs_dt.R"),
tags$h3("Third level heading"),
tags$a("This app is built with Shiny.", href = "https://shiny.posit.co/"),
# embed your html yourself
selectInput(
label = "Select highest imputataton level:",
),
column(12,
)
tags$h4("Highest Imputation= n, default"),
Permitted Values: "Y" (year, highest level), "M" (month), "D" (day), "n" (none, lowest level)) '),
source("~/code/SHINY/ADMIRAL/dervie_advs_dt.R")
wrapper(mhdt, highest_imputation=input$select )
wrapper = function(dtc, highest_imputation){
res = impute_dtc_dt(dtc=dtc, highest_imputation=highest_imputation)
tibble(dtc, imputed )
}
wrapper(mhdt, highest_imputation=input$select )
source("~/code/SHINY/ADMIRAL/dervie_advs_dt.R")
#if (interactive()) {                   #
# table example
shinyApp(
ui = fluidPage(
h3("Working with derive_advs_dt.R"),
textOutput('version'),
tags$h3("Third level heading"),
tags$br(),
tags$a("This app is built with Shiny.", href = "https://shiny.posit.co/"),
tags$br(),
# embed your html yourself
HTML("hello </br> world"),
selectInput(
inputId = "select",
label = "Select highest imputataton level:",
choices = list("n" = "n", "Y" = "Y", "M" = "M", "D" = "D")
),
fluidRow(
column(12,
tableOutput('table1')
)
),
tags$h4("Highest Imputation= n, default"),
tags$h5('highest_imputation </br>
Highest imputation level</br>
The highest_imputation argument controls which components of the DTC value are imputed if they are missing. All components up to the specified level are imputed.
If a component at a higher level than the highest imputation level is missing, NA_character_ is returned. For example, for highest_imputation = "D" "2020" results in NA_character_ because the month is missing.
If "n" is specified no imputation is performed, i.e., if any component is missing, NA_character_ is returned.
If "Y" is specified, date_imputation should be "first" or "last" and min_dates or max_dates should be specified respectively. Otherwise, NA_character_ is returned if the year component is missing.
Permitted Values: "Y" (year, highest level), "M" (month), "D" (day), "n" (none, lowest level)) '),
fluidRow(
column(12,
tableOutput('table2')
),
tags$h4("Highest Imputation= D"),
fluidRow(
column(12,
tableOutput('table3')
)
),
server = function(input, output) {
wrapper = function(dtc, highest_imputation){
res = impute_dtc_dt(dtc=dtc, highest_imputation=highest_imputation)
tibble(dtc, imputed )
}
res =wrapper(mhdt, highest_imputation=input$select )
output$table1<- renderTable(mhdt)
output$table2 <- renderTable(res1)
output$table3 <- renderTable(res)
}
)
unlist(mhdt)
res =wrapper(unlist(mhdt), highest_imputation=input$select )
res =wrapper(unlist(mhdt), highest_imputation=select )
source("~/code/SHINY/ADMIRAL/dervie_advs_dt.R")
output$table1<- renderTable(mhdt)
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
library(shiny)
library(ggplot2)
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
runApp('first_shiny_app')
runApp('ADMIRAL')
rsconnect::writeManifest()
# new Posit Connect cloud requires a JSON manifest
rsconnect::writeManifest()
pak:pak("posit-dev/r-shinylive")
library(pak)
pak:pak("posit-dev/r-shinylive")
shiny::runApp('basic_shiny_web')
##  file <- "320_simple_App.R"
##
##  PURPOSE:    Very simple Shiny App.
##  USAGE:      >source("<filename>") (only 1st)
library(shiny)
# # Create and then Run a Shiny app object
app <- shinyApp(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
runApp(app)
## Only run this example in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
# Apps can be run without a server.r and ui.r file
runApp(list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
))
}
ui = fluidPage(
h3("Working with derive_advs_dt.R"),
textOutput('version'),
tags$h3("Third level heading"),
tags$br(),
tags$a("This app is built with Shiny.", href = "https://shiny.posit.co/"),
tags$br(),
# embed your html yourself
HTML("hello </br> world"),
titlePanel("Impute Explorer"),
sidebarPanel(
selectInput('impute_level','Highest Imputation Level', c("M", "D", "n")),
# selectInput('x', 'X', names(dataset)),
# selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
# selectInput('color', 'Color', c('None', names(dataset))),
#checkboxInput('jitter', 'Jitter'),
#checkboxInput('smooth', 'Smooth'),
),
mainPanel(
tags$h4("Highest Imputation= n, default"),
tags$h5('highest_imputation </br>
Highest imputation level</br>
The highest_imputation argument controls which components of the DTC value are imputed if they are missing. All components up to the specified level are imputed.
If a component at a higher level than the highest imputation level is missing, NA_character_ is returned. For example, for highest_imputation = "D" "2020" results in NA_character_ because the month is missing.
If "n" is specified no imputation is performed, i.e., if any component is missing, NA_character_ is returned.
If "Y" is specified, date_imputation should be "first" or "last" and min_dates or max_dates should be specified respectively. Otherwise, NA_character_ is returned if the year component is missing.
Permitted Values: "Y" (year, highest level), "M" (month), "D" (day), "n" (none, lowest level)) '),
fluidRow(
column(12,
tableOutput('dataset')
)
),
fluidRow(
column(12,
tableOutput('imputed')
)
) # ui
server = function(input,output) {
output$dataset = renderTable(dataset)
imputed = dataset
res = reactive(impute_dtc_dtm(dtc = dataset,
highest_imputation = input$impute_level))
output$imputed = renderTable(res())
}
runApp('ADMIRAL')
library(shiny)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
runApp('simple_database_select_fields_panel')
library(shiny)
ui <- fluidPage(
textOutput("message")
)
server <- function(input, output, session) {
output$message <- renderText("hello message changed")
}
shinyApp(ui, server)
runApp('DEBUG')
library(shiny)
ui <- fluidPage(
textOutput("message")
)
server <- function(input, output, session) {
output$message <- renderText("hello message changed")
}
shinyApp(ui, server)
runApp('data_frame_select_rows_columns/data_frame_dplyr')
colnames(iris)
names(iris)
runApp('data_frame_select_rows_columns/data_frame_dplyr')
iris
names(iris)
# WANT
col = c("Sepal.Length")
f = function(ds, col) ds |> dplyr::filter(col)
f(ds=iris, col= expr(col))
# WANT
col = c("Sepal.Length")
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= expr(col))
# WANT
col = c("Sepal.Length")
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= exprs(col))
f = function(ds, col) ds |> dplyr::filter(col)
f(ds=iris, col= exprs(col))
# WANT
col = "Sepal.Length"
f = function(ds, col) ds |> dplyr::filter(col)
f(ds=iris, col= exprs(col))
# WANT
col = "Sepal.Length"
f = function(ds, col) ds |> dplyr::filter(col)
f(ds=iris, col= exprs(Sepal.Length))
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= exprs(Sepal.Length))
# WANT
col = "Sepal.Length"
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= exprs(Sepal.Length))
iris
head(iris)
?dplyr::filter
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= exprs(Sepal.Length > 1))
f = function(ds, col) ds |> dplyr::select(!!col)
f(ds=iris, col= exprs(Sepal.Length))
f = function(ds, col) ds |> dplyr::select(!!col)
f(ds=iris, col= exprs("Sepal.Length"))
f = function(ds, col) ds |> dplyr::select(!!col)
f(ds=iris, col= quote(Sepal.Length) )
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= quote(Sepal.Length > 1) )
# WANT
col = "Sepal.Length"
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= quote(Sepal.Length > 5) )
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= quote(Sepal.Length > 7) )
# like a function
filtering_string <- reactive ({
#paste0("dplyr::filter(iris, ", input$COLUMN, " ", input$CONDITION, " ", input$VALUE, ")")
f(ds=iris, col = quote(Sepal.Length > 7 ))
})
runApp('data_frame_select_rows_columns/data_frame_dplyr')
call(`>`, 4, 2)
call(">", 4, 2)
eval(call(">", 4, 2))
x = 4
y = 2
eval(call(">", x, y))
eval(call(">", y, x))
f(ds = iris, quote(call(">", Sepal.Length)))
f(ds=iris, col= quote(Sepal.Length > 7) )
f(ds = iris, quote(call(">", Sepal.Length, 7)))
quote(call(">", Sepal.Length, 7))
eval(quote(call(">", Sepal.Length, 7)))
# WORKS, but does not work when used in filter_string
f = function(ds, col) ds |> dplyr::filter(!!col)
## To Run:   Run App, in Rstudio
## REFERENCE:   https://forum.posit.co/t/use-shiny-to-choose-column-equality-and-value-to-filter-by-conditions/47449
library(shiny)
library(tidyverse)
ui <- fluidPage(
# Sidebar:   USER SELECTS
# column input
# boolean input
# and value input
sidebarLayout(
sidebarPanel(
fluidRow(column(4, selectInput("COLUMN", "Filter By:", choices = colnames(iris))),
column(4, selectInput("CONDITION", "Boolean", choices = c("==", "!=", ">", "<"))),
column(4, uiOutput("COL_VALUE")))
),
# Show text generated by sidebar
# use text in tidy pipeline to create subsetted dataframe
mainPanel(
verbatimTextOutput("as_text"),
tableOutput("the_data")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$COL_VALUE <- renderUI({
x <- iris %>% dplyr::select(!!sym(input$COLUMN))
selectInput("VALUE", "Value", choices = x, selected = x[1])
})
# like a function
filtering_string <- reactive ({
#paste0("dplyr::filter(iris, ", input$COLUMN, " ", input$CONDITION, " ", input$VALUE, ")")
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
})
output$as_text <- renderText({
filtering_string()
})
# WORKS, but does not work when used in filter_string
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= quote(Sepal.Length > 7) )
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
quote(call(">", Sepal.Length, 7))
eval(quote(call(">", Sepal.Length, 7)))
# actual work
output$the_data <- renderTable({
eval(parse(text = filtering_string()))
})
}
# Run the application
shinyApp(ui = ui, server = server)#
# Run the application
shinyApp(ui = ui, server = server)#
## To Run:   Run App, in Rstudio
## REFERENCE:   https://forum.posit.co/t/use-shiny-to-choose-column-equality-and-value-to-filter-by-conditions/47449
library(shiny)
library(tidyverse)
ui <- fluidPage(
# Sidebar:   USER SELECTS
# column input
# boolean input
# and value input
sidebarLayout(
sidebarPanel(
fluidRow(column(4, selectInput("COLUMN", "Filter By:", choices = colnames(iris))),
column(4, selectInput("CONDITION", "Boolean", choices = c("==", "!=", ">", "<"))),
column(4, uiOutput("COL_VALUE")))
),
# Show text generated by sidebar
# use text in tidy pipeline to create subsetted dataframe
mainPanel(
verbatimTextOutput("as_text"),
tableOutput("the_data")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$COL_VALUE <- renderUI({
x <- iris %>% dplyr::select(!!sym(input$COLUMN))
selectInput("VALUE", "Value", choices = x, selected = x[1])
})
# like a function
filtering_string <- reactive ({
#paste0("dplyr::filter(iris, ", input$COLUMN, " ", input$CONDITION, " ", input$VALUE, ")")
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
})
output$as_text <- renderText({
filtering_string()
})
# WORKS, but does not work when used in filter_string
f = reactive({function(ds, col) ds |> dplyr::filter(!!col)})
#  f(ds=iris, col= quote(Sepal.Length > 7) )
#  f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
#  quote(call(">", Sepal.Length, 7))
#  eval(quote(call(">", Sepal.Length, 7)))
# actual work
output$the_data <- renderTable({
eval(parse(text = filtering_string()))
})
}
# Run the application
shinyApp(ui = ui, server = server)#
source("~/code/SHINY/app.R")
source("app.R")
dir()
#' This is a super app constructor.
#' @param ... something
#' @return shiny app object
#' @examples
#' if (interactive()) {
#'   my_super_app()
#' }
my_super_app <- function(...) {
...
source("app.R")
shiny::shinyApp(...)
}
#' This is a super app constructor.
#' @param ... something
#' @return shiny app object
#' @examples
#' if (interactive()) {
#'   my_super_app()
#' }
my_super_app <- function(...) {
...
source("app.R")
shiny::shinyApp(ui=ui, server=server)
}
ui
source("app.R")
source("basic_roxy_web/app.R")
#' This is a super app constructor.
#' @param ... something
#' @return shiny app object
#' @examples
#' if (interactive()) {
#'   my_super_app()
#' }
my_super_app <- function(...) {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app(ui= ui, server= sever)
#' This is a super app constructor.
#' @param ... something
#' @return shiny app object
#' @examples
#' if (interactive()) {
#'   my_super_app()
#' }
my_super_app <- function(ui, server) {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app(ui= ui, server= sever)
#' This is a super app constructor.
#' @param ... something
#' @return shiny app object
#' @examples
#' if (interactive()) {
#'   my_super_app()
#' }
my_super_app <- function() {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app()
ui
server
#' @examplesShinyLive
library(mypackage)
#' @examplesShinyLive
interactive <- function() TRUE
{{ next_example }}
