library(shiny); runApp('100_first_shiny.R')
fluidPage(){
fluidPage(){
fluidPage(
sliderInput(inputId = "number",
label = "Select a number",
value = 500, min = 25, max = 1000),
plotOutput("hist")
)
library(shiny)
fluidPage(
sliderInput(inputId = "number",
label = "Select a number",
value = 500, min = 25, max = 1000),
plotOutput("hist")
)
shinyApp(ui = ui, server = server)
runApp('Schmuller_BOOK/UniformRandom')
runApp('Schmuller_BOOK/UniformRandom')
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
}, res = 96)
##  input$plot_click is event object; in particular x, y values
output$data <- renderTable({
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg", allRows =TRUE)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) + geom_point()
}, res = 96)
output$data <- renderTable({
req(input$plot_click)
nearPoints(mtcars, input$plot_click)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) + geom_point()
}, res = 96)
output$data <- renderTable({
req(input$plot_click)
nearPoints(mtcars, input$plot_click)
})
}
shinyApp(ui, server)
options(shiny.autoload.r = TRUE)
shinyApp(ui, server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
plotOutput("plot", click = "plot_click"),
tableOutput("data")
)
## Choose 1,  base R plot, OR
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
}, res = 96)
##  input$plot_click is event object; in particular x, y values
## allRows = TRUE, entire database, with selected point marked TRUE
output$data <- renderTable({
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg", allRows =TRUE)
})
}
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) + geom_point()
}, res = 96)
output$data <- renderTable({
req(input$plot_click)
nearPoints(mtcars, input$plot_click, allRows=TRUE)
})
}
options(shiny.autoload.r = TRUE)
shinyApp(ui, server)
output$data <- renderTable({
req(input$plot_click)
#    nearPoints(mtcars, input$plot_click, allRows=TRUE)
nearPoints(mtcars, input$plot_click)
})
set.seed(1014)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ui <- fluidPage(
plotOutput("plot", click = "plot_click", )
)
sf
df
server <- function(input, output, session) {
dist <- reactiveVal(rep(1, nrow(df)))
browser()
observeEvent(input$plot_click,
dist(nearPoints(df, input$plot_click, allRows = TRUE, addDist = TRUE)$dist_)
)
output$plot <- renderPlot({
df$dist <- dist()
ggplot(df, aes(x, y, size = dist)) +
geom_point() +
scale_size_area(limits = c(0, 1000), max_size = 10, guide = NULL)
}, res = 96)
}
options(shiny.autoload.r = TRUE)
shinyApp(ui, server)
df
dist
C
set.seed(1014)
df <- data.frame(x = rnorm(100), y = rnorm(100))
ui <- fluidPage(
plotOutput("plot", click = "plot_click", )
)
server <- function(input, output, session) {
dist <- reactiveVal(rep(1, nrow(df)))
browser()
observeEvent(input$plot_click,
dist(nearPoints(df, input$plot_click, allRows = TRUE, addDist = TRUE)$dist_)
)
output$plot <- renderPlot({
df$dist <- dist()
ggplot(df, aes(x, y, size = dist)) +
geom_point() +
scale_size_area(limits = c(0, 1000), max_size = 10, guide = NULL)
}, res = 96)
}
options(shiny.autoload.r = TRUE)
shinyApp(ui, server)
dist
dist()
q
dist()
install.packages("shinyFeedback")
library(shiny)
library(shinyFeedback)
ui <- fluidPage(
shinyFeedback::useShinyFeedback(),
numericInput("n", "n", value = 10),
textOutput("half")
)
server <- function(input, output, session) {
half <- reactive({
even <- input$n %% 2 == 0
shinyFeedback::feedbackWarning("n", !even, "Please select an even number")
input$n / 2
})
output$half <- renderText(half())
}
shinyApp(ui, server)
library(shiny)
library(shinyFeedback)
# Warns if user enters odd integer
ui <- fluidPage(
shinyFeedback::useShinyFeedback(),
numericInput("n", "n", value = 10),
textOutput("half")
)
server <- function(input, output, session) {
half <- reactive({
even <- input$n %% 2 == 0
shinyFeedback::feedbackWarning("n", !even, "Please select an even number")
req(even)
input$n / 2
})
output$half <- renderText(half())
}
shinyApp(ui, server)
#------------------------------------
ui <- fluidPage(
selectInput("language", "Language", choices = c("", "English", "Maori")),
textInput("name", "Name"),
textOutput("greeting")
)
server <- function(input, output, session) {
greetings <- c(
English = "Hello",
Maori = "Kia ora"
)
output$greeting <- renderText({
paste0(greetings[[input$language]], " ", input$name, "!")
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
greetings <- c(
English = "Hello",
Maori = "Kia ora"
)
output$greeting <- renderText({
req(input$language, input$name)
paste0(greetings[[input$language]], " ", input$name, "!")
})
}
shinyApp(ui, server)
# req() block until shiny has necessary info (ie user input etc.)
#
# If input is blank (no user input and NO default), get error.
# Use req()   halts shiny until user enters all necessary info.
#------------------------------------
ui <- fluidPage(
shinyFeedback::useShinyFeedback(),
textInput("dataset", "Dataset name"),
tableOutput("data")
)
library(shiny)
### Only run this example in interactive R sessions
if (interactive()) {                   #
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
),
server = function(input, output) {
output$table <- renderTable(mtcars)
}
)
}
library(shiny); runApp('SHINY_TUTORIAL/sidebarLayout.R')
```{r}
library(shiny)
names(tags)                            # fcts to translate R to HTML
tags$b("Example of b tag")
library(shiny)
library(admiral)
library(lubridate)
# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
#' # Create ASTDT and ASTDTF
#' # No imputation for partial date
#' derive_vars_dt(
#'   mhdt,
#'   new_vars_prefix = "AST",
#'   dtc = MHSTDTC
#' )
#
if (interactive()) {                   #
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
),
server = function(input, output) {
output$table <- renderTable(mhdt)
}
)
}
# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
# Create ASTDT and ASTDTF
# No imputation for partial date
res =derive_vars_dt(
mhdt,
new_vars_prefix = "AST",
dtc = MHSTDTC
)
res
mhdt
# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
# Create ASTDT and ASTDTF
# No imputation for partial date
res =derive_vars_dt(
mhdt,
new_vars_prefix = "AST",
dtc = MHSTDTC
)
View(res)
View(mhdt)
View(res)
res
mhdt
# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
mhdt
source("~/code/SHINY/dervie_advs_dt.R")
if (interactive()) {                   #
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
),
server = function(input, output) {
output$table <- renderTable(mhdt)
}
)
}
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
),
fluidRow(
column(12,
tableOutput('table1')
)
),
server = function(input, output) {
#output$table <- renderTable(mhdt)
output$table1 <- renderTable(res)
}
)
output$table <- renderTable(mhdt)
library(admiral)
# table for testing
mhdt <- tribble(
~MHSTDTC,
"2019-07-18T15:25:40",
"2019-07-18T15:25",
"2019-07-18",
"2019-02",
"2019",
"2019---07",
""
)
# Create ASTDT and ASTDTF
# No imputation for partial date
res =derive_vars_dt(
mhdt,
new_vars_prefix = "AST",
dtc = MHSTDTC
)
if (interactive()) {                   #
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
),
fluidRow(
column(12,
tableOutput('table1')
)
),
server = function(input, output) {
output$table <- renderTable(mhdt)
output$table1 <- renderTable(res)
}
)
}
