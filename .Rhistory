output$COL_VALUE <- renderUI({
x <- iris %>% dplyr::select(!!sym(input$COLUMN))
selectInput("VALUE", "Value", choices = x, selected = x[1])
})
filtering_string <- reactive ({
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
})
output$as_text <- renderText({
filtering_string()
})
f = function(ds, col) ds |> dplyr::filter(!!col)
f(ds=iris, col= quote(Sepal.Length > 7) )
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
quote(call(">", Sepal.Length, 7))
eval(quote(call(">", Sepal.Length, 7)))
output$the_data <- renderTable({
eval(parse(text = filtering_string()))
})
}
shinyApp(ui = ui, server = server)#
shinyApp(ui = ui, server = server)#
library(shiny)
library(tidyverse)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(column(4, selectInput("COLUMN", "Filter By:", choices = colnames(iris))),
column(4, selectInput("CONDITION", "Boolean", choices = c("==", "!=", ">", "<"))),
column(4, uiOutput("COL_VALUE")))
),
mainPanel(
verbatimTextOutput("as_text"),
tableOutput("the_data")
)
server <- function(input, output) {
output$COL_VALUE <- renderUI({
x <- iris %>% dplyr::select(!!sym(input$COLUMN))
selectInput("VALUE", "Value", choices = x, selected = x[1])
})
filtering_string <- reactive ({
f(ds = iris, quote(call(">", input$Sepal.Length, 7)))
})
output$as_text <- renderText({
filtering_string()
})
f = reactive({function(ds, col) ds |> dplyr::filter(!!col)})
output$the_data <- renderTable({
eval(parse(text = filtering_string()))
})
}
shinyApp(ui = ui, server = server)#
source("~/code/SHINY/app.R")
source("app.R")
dir()
my_super_app <- function(...) {
...
source("app.R")
shiny::shinyApp(...)
}
my_super_app <- function(...) {
...
source("app.R")
shiny::shinyApp(ui=ui, server=server)
}
ui
source("app.R")
source("basic_roxy_web/app.R")
my_super_app <- function(...) {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app(ui= ui, server= sever)
my_super_app <- function(ui, server) {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app(ui= ui, server= sever)
my_super_app <- function() {
...
source("basic_roxy_web/app.R")
shiny::shinyApp(ui=ui, server=server)
}
my_super_app()
ui
server
library(mypackage)
interactive <- function() TRUE
{{ next_example }}
pak::pak("posit-dev/r-shinylive")
system.file("examples", "01_hello", package="shiny") |>
fs::dir_copy("myapp", overwrite = TRUE)
system.file("examples", "01_hello", package="shiny") |>
fs::dir_copy("myapp", overwrite = TRUE)
?system.file
system.file("examples", "01_hello", package="shiny")
fs::dir_copy(path, "myapp", overwrite = TRUE)
path = system.file("examples", "01_hello", package="shiny")
fs::dir_copy(path, "myapp", overwrite = TRUE)
shinylive::export("myapp", "site")
shinylive::export("./shinylive/myapp", "site")
dir()
setwd(shinylive)
setwd("shinylive")
ls
dir()
setwd("myapp")
dir()
setwd("myapp")
setwd("~/code/SHINY/shinylive")
dir()
dir("myapp/ ")
dir("myapp")
getwd()
setwd("myapp")
dir()
cat app.
cat app.R
library(shiny)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
shinylive::export("./shinylive/myapp", "site")
dir()
shinylive::export("myapp", "site")
setwd("~/code/SHINY/shinylive")
dir()
shinylive::export("myapp", "site")
httpuv::runstaticServer()
shinylive::export("myapp", "site")
httpuv::runStaticServer("site")
devtools::install_github("https://github.com/atorus-research/datasetjson.git", ref="dev")
library(shiny)
library(ggplot2)
load("movies.RData")
load("./movies.RData")
dir()
load("rstudio_movies_movies_shiny_app/movies.RData")
getwd()
load("rstudio_movies_movies_shiny_app/movies.RData")
load("./rstudio_movies_movies_shiny_app/movies.RData")
dir()
load("./rstudio_movies_movies_shiny_app/movies.RData")
load("~/code/SHINY/rstudio_movies_movies_shiny_app/movies.RData")
load("~/code/SHINY/rstudio_movies_shiny_app/movies.RData")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
mainPanel(
plotOutput(outputId = "scatterplot")
)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
shinyApp(ui = ui, server = server)
movies <- movies %>%
mutate(score_ratio = audience_score / critics_score)
movies
movies$score_ratio
lintr:::addin_lint()
runApp('rstudio_movies_shiny_app/app1.R')
styler:::style_active_file()
runApp('rstudio_movies_shiny_app/app1.R')
shinyApp(ui=ui, server=server)
runApp('rstudio_movies_shiny_app/app1.R')
names(movies)
levels(movies$title_type)
runApp('rstudio_movies_shiny_app/app1.R')
movies %>%
dplyr::filter(title_type %in% input$selected_title_type) %>%
group_by(mpaa_rating) %>%
summarise(mean_score_ratio = mean(score_ratio), SD = sd(score_ratio), n = n())
movies %>%
dplyr::filter(title_type %in% input$selected_title_type) %>%
group_by(mpaa_rating) %>%
summarise(mean_score_ratio = mean(score_ratio), SD = sd(score_ratio), n = n())
movies %>%
dplyr::filter(title_type %in% input$selected_title_type) %>%
group_by(mpaa_rating) %>%
summarise(mean_score_ratio = mean(score_ratio), SD = sd(score_ratio), n = n())
library(shiny)
library(ggplot2)
load("~/code/SHINY/rstudio_movies_shiny_app/movies.RData")
movies <- movies %>%
mutate(score_ratio = audience_score / critics_score)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
),
checkboxGroupInput(
inputId = "selected_title_type",
label = "Select title type:",
choices = levels(movies$title_type),
selected = levels(movies$title_type)
)
), # sidebarPanel
mainPanel(
plotOutput(outputId = "scatterplot"),
tableOutput(outputId = "summarytable")
)
) # end fluidPage
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
output$summarytable <- renderTable({
movies %>%
dplyr::filter(title_type %in% input$selected_title_type) %>%
group_by(mpaa_rating) %>%
summarise(mean_score_ratio = mean(score_ratio), SD = sd(score_ratio), n = n())
},
striped = TRUE,
spacing = "l",
align = "lccr",
digits = 4,
width = "90%",
caption = "Score ratio (audience / critics' scores) summary statistics by MPAA rating."
)
print(movies, n=3)
}
print(movies, n=3)
output
output$summarytable
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
shinyApp(
ui = fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
),
server = function(input, output) {
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
)
runApp('observeEvent')
runApp('Repond_once')
install.package("plumber")
pak::pak("plumber")
library(shiny)
ui <- pageWithSidebar(
textInput("x", "x"),
textInput("y", "x")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
input$goButton
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
server <- function(input, output) {
output$text <- renderText({
paste("The value of x is", input$x)
})
}
library(shiny)
ui <- pageWithSidebar(
textInput("x", "x"),
textInput("y", "x"),
textOutput("text")
)
runApp('342_isolate2.R')
?textOutput
shinyApp(ui = ui, server = server)
runApp('342_isolate2.R')
library(shiny)
ui <- pageWithSidebar(
textInput("x", "x"),
textInput("y", "y"),
textOutput("text1"),
textOutput("text2")
)
server <- function(input, output) {
output$text1 <- renderText({
paste("The value of x is", input$x)
})
output$text2 <- renderText({
paste("Y is", input$y, "and X is", isolate(input$x))
})
}
shinyApp(ui = ui, server = server)
runApp('342_isolate2.R')
?textInput
runApp('342_isolate2.R')
?textOutput
runApp('342_isolate2.R')
pak::pak("kableExtra")
]]
a
A
n
n
pak::pak("lookup")
cars
